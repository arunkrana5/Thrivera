@model EMPTalentPool.Add
@section style{
    @System.Web.Optimization.Styles.Render("~/bundle/dataTablecss")

    @Html.IncludeVersionedCss(Url.Content("../assets/design/plugins/fileupload/css/fileupload.css"))

}
<div class="table-section">

    <div class="page-header px-3 py-2">
        <div class="page-leftheader">
            <h4 class="page-title">Employee Talent Pool</h4>
        </div>

    </div>
    @using (Ajax.BeginForm("AddEMPTalentPool", "Masters",
            new { src = ViewBag.src },
             new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSuccess", OnBegin = "ShowLoadingDialog()" },
                new { @id = "AddEMPTalentPoolForm", @enctype = "multipart/form-data" })
        )
    {
        <div class="card">
            <div class="card-body">
                <div class="row p-2">
                    <div class="col-lg-2 form-group">
                        <label>Name</label>
                        @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>DOB </label>
                        @Html.TextBoxFor(model => model.DOB, new { @class = "form-control", @type = "date" })
                        @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Mobile Number   </label>
                        @Html.TextBoxFor(model => model.Mobile, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Email </label>
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Work Profile   </label>
                        @Html.TextBoxFor(model => model.WorkProfile, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.WorkProfile, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Expected Salary   </label>
                        @Html.TextBoxFor(model => model.ExpectedSalary, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ExpectedSalary, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>Qualification   </label>
                        @Html.TextBoxFor(model => model.Qualification, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Qualification, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>Trade Experience   </label>
                        @Html.TextBoxFor(model => model.Trade_Experience, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Trade_Experience, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>Total Experience</label>
                        <div class="input-group mb-3">
                            @Html.TextBoxFor(model => model.Experience, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Experience, "", new { @class = "text-danger" })
                            <div class="input-group-append">
                                <span class="input-group-text" id="basic-addon2">In years </span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-2 form-group">
                        <label>State</label>
                        @Html.DropDownListFor(n => n.State, new SelectList(Model.StateList, "ID", "Name", Model.State), "Select",
                                           new { @class = "form-control  applyselect", @onchange = "FillCity()" })
                        @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2 form-group">
                        <label>City</label>
                        @Html.DropDownListFor(n => n.City, new SelectList(Model.CityList, "ID", "Name", Model.City), "Select",
                                           new { @class = "form-control  applyselect" })
                        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Pin Code  </label>
                        @Html.TextBoxFor(model => model.Pincode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6 form-group">
                        <label>Address </label>
                        @Html.TextAreaFor(model => model.Address, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-4 form-group">
                        <label>Dealer</label>
                        @Html.DropDownListFor(n => n.DealerID, new SelectList(Model.DealerList, "ID", "Name", Model.DealerID), "Select",
                                           new { @class = "form-control  applyselect" })
                        @Html.ValidationMessageFor(model => model.DealerID, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-2 form-group">
                        <label>Branch</label>
                        @Html.DropDownListFor(n => n.BranchID, new SelectList(Model.BranchList, "ID", "Name", Model.BranchID), "Select",
                                           new { @class = "form-control  applyselect" })
                        @Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>


        <div class="card">
            <div class="card-header mb-1">
                <h4 class="card-title" style="font-weight:500; text-transform:inherit">Current Working company Details  </h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Company Name </label>
                        @Html.TextBoxFor(model => model.CW_Company, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CW_Company, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>Salary </label>
                        @Html.TextBoxFor(model => model.CW_Salary, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CW_Salary, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>State</label>
                        @Html.DropDownListFor(n => n.CW_State, new SelectList(Model.StateList, "ID", "Name", Model.CW_State), "Select",
                                           new { @class = "form-control  applyselect", @onchange = "FillCWCity()" })
                        @Html.ValidationMessageFor(model => model.CW_State, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-2 form-group">
                        <label>City</label>
                        @Html.DropDownListFor(n => n.CW_City, new SelectList(Model.CW_CityList, "ID", "Name", Model.CW_City), "Select",
                        new { @class = "form-control  applyselect" })
                        @Html.ValidationMessageFor(model => model.CW_City, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-lg-2 form-group">
                        <label>Pin Code  </label>
                        @Html.TextBoxFor(model => model.CW_Pincode, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CW_Pincode, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-6 form-group">
                        <label>Address </label>
                        @Html.TextAreaFor(model => model.CW_Address, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CW_Address, "", new { @class = "text-danger" })
                    </div>


                </div>
            </div>
        </div>



        <div class="card">
            <div class="card-header mb-1">
                <h4 class="card-title" style="font-weight:500; text-transform:inherit">Resume </h4>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-lg-4 form-group">
                        <label>Upload  </label>
                        @Html.HiddenFor(model => model.AttachID)
                        @Html.HiddenFor(model => model.Latitude)
                        @Html.HiddenFor(model => model.Longitude)
                        @Html.HiddenFor(model => model.Error)
                        @Html.TextBoxFor(x => x.Upload, new { @class = "dropify", @type = "file" })
                    </div>
                    @if (!string.IsNullOrEmpty(Model.AttachPath))
                    {
                        <a href="@Model.AttachPath" target="_blank">Download</a>
                    }
                <div class="col-lg-12 text-center mt-3">
                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                    <button type="submit" class="btn btn-act">Submit</button>
                    <a id="btnSendLocation" class="btn btn-indigo">Refresh Location</a>
                    <a href="@Url.Action("EMPTalentPoolList",new { src = ClsCommon.Encrypt(ViewBag.MenuID+"*"+"/Masters/EMPTalentPoolList") })" type="button" class="btn btn-sm  close-btn">cancel</a>
                </div>
                </div>
            </div>
        </div>
    


}

 
</div>

    @section scripts    {
        @System.Web.Optimization.Scripts.Render("~/bundle/unobtrusivejs")

        @Html.IncludeVersionedJs(Url.Content("../assets/design/plugins/fileupload/js/dropify.js"))
        @Html.IncludeVersionedJs(Url.Content("../assets/design/js/filupload.js"))

        <script>



            function FillCity() {
                var ID = $("#State").find("option:selected").val();
                if (ID != '') {
                    var data = GetDropDownList(ID, "City");
                    if (data != '') {
                        $("#City").empty();
                        $("#City").append($("<option />").val("").text("Select"));
                        $(data).each(function () {
                            $("#City").append($("<option />").val(this.ID).text(this.Name));
                            $("#City").select2();

                        });
                    } else {
                        $("#City").empty();
                        $("#City").append($("<option />").val("").text("Select"));
                    }
                } else {
                    $("#City").empty();
                    $("#City").append($("<option />").val("").text("Select"));
                }

            }


            function FillCWCity() {
                var ID = $("#CW_State").find("option:selected").val();
                if (ID != '') {
                    var data = GetDropDownList(ID, "City");
                    if (data != '') {
                        $("#CW_City").empty();
                        $("#CW_City").append($("<option />").val("").text("Select"));
                        $(data).each(function () {
                            $("#CW_City").append($("<option />").val(this.ID).text(this.Name));
                            $("#CW_City").select2();

                        });
                    } else {
                        $("#CW_City").empty();
                        $("#CW_City").append($("<option />").val("").text("Select"));
                    }
                } else {
                    $("#CW_City").empty();
                    $("#CW_City").append($("<option />").val("").text("Select"));
                }

            }



            function OnSuccess(obj) {
                if (obj.Status) {
                    SuccessToaster(obj.SuccessMessage);
                    window.location.href = obj.RedirectURL;
                }
                else {
                    CloseLoadingDialog();
                    FailToaster(obj.SuccessMessage);

                }
            }


            function getLocation() {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(showPosition, showError);
                } else {                   
                    $("#MTargetDiv").empty();
                    $("#MTargetDiv").html("Please turn on the Location by setting");

                }
            }

            function showPosition(position) {
                $("#Latitude").val(position.coords.latitude);
                $("#Longitude").val(position.coords.longitude);
            }

            function showError(error) {
                var Message = "";
                switch (error.code) {
                    case error.PERMISSION_DENIED:
                        Message = "User denied the request for Geolocation.";;
                        break;
                    case error.POSITION_UNAVAILABLE:
                        Message = "Location information is unavailable.";
                        break;
                    case error.TIMEOUT:
                        Message = "The request to get user location timed out.";
                        break;
                    case error.UNKNOWN_ERROR:
                        Message = "An unknown error occurred.";
                        break;
                }
                $("#Error").val(Message);
            }

            $("#btnSendLocation").click(function (e) {
                SendMyLocation();
            });
        </script>
    }
